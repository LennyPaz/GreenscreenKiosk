# CSS Best Practices & Coding Standards

## 🎯 Core Principles

### 1. **Plan Before You Code**
- Sketch your layout first
- Identify reusable components
- Define your color palette and spacing system upfront
- Create a style guide document

---

## 📁 File Organization

### Split CSS into Multiple Files
```
styles/
├── base/
│   ├── reset.css          # Browser resets
│   ├── variables.css      # CSS custom properties
│   └── typography.css     # Font styles
├── layout/
│   ├── grid.css           # Grid systems
│   └── containers.css     # Layout containers
├── components/
│   ├── buttons.css        # All button styles
│   ├── cards.css          # Card components
│   ├── modals.css         # Modal dialogs
│   └── forms.css          # Form elements
└── utilities/
    └── helpers.css        # Utility classes
```

**Import them in order:**
```css
@import 'base/variables.css';
@import 'base/reset.css';
@import 'base/typography.css';
@import 'layout/grid.css';
@import 'components/buttons.css';
/* ... etc */
```

---

## 🎨 Use CSS Variables (Custom Properties)

### Always Define Variables First
```css
:root {
    /* Color Palette */
    --color-primary: #3498db;
    --color-secondary: #2ecc71;
    --color-accent: #e74c3c;
    --color-text: #2c3e50;
    --color-bg: #ffffff;
    --color-border: #e0e0e0;
    
    /* Spacing System (4px base) */
    --space-xs: 0.25rem;   /* 4px */
    --space-sm: 0.5rem;    /* 8px */
    --space-md: 1rem;      /* 16px */
    --space-lg: 1.5rem;    /* 24px */
    --space-xl: 2rem;      /* 32px */
    --space-2xl: 3rem;     /* 48px */
    
    /* Typography */
    --font-primary: 'Inter', sans-serif;
    --font-secondary: 'Georgia', serif;
    
    --text-xs: 0.75rem;    /* 12px */
    --text-sm: 0.875rem;   /* 14px */
    --text-base: 1rem;     /* 16px */
    --text-lg: 1.125rem;   /* 18px */
    --text-xl: 1.25rem;    /* 20px */
    --text-2xl: 1.5rem;    /* 24px */
    
    /* Border Radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;
    --radius-full: 9999px;
    
    /* Shadows */
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
    
    /* Transitions */
    --transition-fast: 150ms ease;
    --transition-base: 250ms ease;
    --transition-slow: 350ms ease;
    
    /* Z-index Scale */
    --z-dropdown: 1000;
    --z-modal: 2000;
    --z-tooltip: 3000;
}
```

**Usage:**
```css
.button {
    background: var(--color-primary);
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    transition: all var(--transition-base);
}
```

---

## 🏗️ Naming Convention: BEM (Block Element Modifier)

### Structure
```
.block__element--modifier
```

### Examples
```css
/* Block: Standalone component */
.card { }

/* Element: Part of the block */
.card__header { }
.card__body { }
.card__footer { }

/* Modifier: Variation of block/element */
.card--featured { }
.card--small { }
.button--primary { }
.button--disabled { }
```

### Real Example
```css
/* Block */
.product-card {
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
}

/* Elements */
.product-card__image {
    width: 100%;
    height: auto;
}

.product-card__title {
    font-size: var(--text-lg);
    font-weight: bold;
}

.product-card__price {
    color: var(--color-accent);
}

/* Modifiers */
.product-card--featured {
    border-color: var(--color-primary);
    box-shadow: var(--shadow-lg);
}

.product-card--sold-out {
    opacity: 0.6;
}
```

---

## 🔄 DRY Principle: Don't Repeat Yourself

### Create Reusable Base Classes
```css
/* ❌ BAD: Repetition */
.button-primary {
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

.button-secondary {
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

/* ✅ GOOD: Base class + modifiers */
.button {
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-base);
    border: none;
}

.button--primary {
    background: var(--color-primary);
    color: white;
}

.button--secondary {
    background: var(--color-secondary);
    color: white;
}

.button--outline {
    background: transparent;
    border: 2px solid var(--color-primary);
    color: var(--color-primary);
}
```

---

## 📏 Consistent Spacing System

### Use a Mathematical Scale
```css
:root {
    /* Based on 8px grid */
    --space-1: 0.5rem;   /* 8px */
    --space-2: 1rem;     /* 16px */
    --space-3: 1.5rem;   /* 24px */
    --space-4: 2rem;     /* 32px */
    --space-5: 2.5rem;   /* 40px */
    --space-6: 3rem;     /* 48px */
}
```

### ❌ Avoid Random Values
```css
/* BAD */
margin: 13px;
padding: 17px 23px;
gap: 11px;
```

### ✅ Use System Values
```css
/* GOOD */
margin: var(--space-2);
padding: var(--space-2) var(--space-3);
gap: var(--space-2);
```

---

## 🎯 Specificity Management

### Keep Specificity Low
```css
/* ❌ BAD: Too specific */
body div.container ul li a.link {
    color: blue;
}

/* ✅ GOOD: Low specificity */
.nav-link {
    color: blue;
}
```

### Avoid !important
```css
/* ❌ BAD */
.button {
    background: red !important;
}

/* ✅ GOOD: Increase specificity properly */
.button.button--primary {
    background: red;
}
```

---

## 📱 Mobile-First Approach

### Start with Mobile, Enhance for Desktop
```css
/* ✅ GOOD: Mobile first */
.container {
    padding: var(--space-2);
}

/* Tablet */
@media (min-width: 768px) {
    .container {
        padding: var(--space-4);
    }
}

/* Desktop */
@media (min-width: 1024px) {
    .container {
        padding: var(--space-6);
        max-width: 1200px;
    }
}
```

---

## 💬 Comment Your Code

### Use Section Comments
```css
/* ============================================
   BUTTONS
   ============================================ */

/* Base button styles */
.button {
    /* ... */
}

/* Button sizes */
.button--small { /* ... */ }
.button--large { /* ... */ }

/* ============================================
   CARDS
   ============================================ */
```

### Explain Non-Obvious Code
```css
.modal {
    /* Prevent body scroll when modal is open */
    overflow: hidden;
    
    /* Center modal using flexbox instead of position: fixed
       to avoid issues with mobile keyboards */
    display: flex;
    align-items: center;
    justify-content: center;
}
```

---

## 🧩 Utility Classes (Optional)

### Create Common Utilities
```css
/* Spacing utilities */
.m-0 { margin: 0; }
.m-1 { margin: var(--space-1); }
.m-2 { margin: var(--space-2); }

.p-0 { padding: 0; }
.p-1 { padding: var(--space-1); }
.p-2 { padding: var(--space-2); }

/* Text utilities */
.text-center { text-align: center; }
.text-bold { font-weight: bold; }

/* Display utilities */
.hidden { display: none; }
.flex { display: flex; }
.grid { display: grid; }
```

---

## ✅ CSS Checklist for Every Project

### Before You Start
- [ ] Define color palette in variables
- [ ] Set up spacing system
- [ ] Choose naming convention (BEM recommended)
- [ ] Create file structure
- [ ] Set up base/reset styles

### While Coding
- [ ] Use CSS variables for colors, spacing, fonts
- [ ] Follow BEM naming convention
- [ ] Create reusable component classes
- [ ] Avoid repetition (DRY principle)
- [ ] Keep specificity low
- [ ] Write mobile-first media queries
- [ ] Comment sections and non-obvious code

### Before Submitting
- [ ] Remove unused CSS
- [ ] Organize related rules together
- [ ] Validate CSS (use W3C validator)
- [ ] Check for accessibility (color contrast, focus states)
- [ ] Test on different screen sizes
- [ ] Remove console.logs and debug code

---

## 🚀 Example: Well-Organized Button System

```css
/* ============================================
   BUTTONS
   Base button component with modifiers
   ============================================ */

/* Base button - shared styles */
.btn {
    /* Layout */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    
    /* Spacing */
    padding: var(--space-md) var(--space-lg);
    
    /* Typography */
    font-family: var(--font-primary);
    font-size: var(--text-base);
    font-weight: 600;
    text-decoration: none;
    
    /* Visual */
    border: 2px solid transparent;
    border-radius: var(--radius-md);
    cursor: pointer;
    
    /* Animation */
    transition: all var(--transition-base);
}

/* Size modifiers */
.btn--small {
    padding: var(--space-sm) var(--space-md);
    font-size: var(--text-sm);
}

.btn--large {
    padding: var(--space-lg) var(--space-xl);
    font-size: var(--text-lg);
}

/* Color modifiers */
.btn--primary {
    background: var(--color-primary);
    color: white;
}

.btn--primary:hover {
    background: var(--color-primary-dark);
}

.btn--secondary {
    background: var(--color-secondary);
    color: white;
}

.btn--outline {
    background: transparent;
    border-color: var(--color-primary);
    color: var(--color-primary);
}

/* State modifiers */
.btn--disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
}
```

---

## 📚 Resources

- **BEM Methodology**: https://getbem.com/
- **CSS Variables Guide**: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties
- **CSS Guidelines**: https://cssguidelin.es/
- **Modern CSS**: https://moderncss.dev/

---

## 🎓 Remember

1. **Organization beats cleverness** - Clear, organized code is better than "clever" shortcuts
2. **Consistency is key** - Pick conventions and stick to them
3. **Think in systems** - Colors, spacing, typography should be systemized
4. **Write for others** - Someone else (or future you) will read this code
5. **Refactor as you go** - If you copy-paste code 3 times, make it a reusable class