/**
 * Operator Dashboard JavaScript - Enhanced Version
 * Handles all dashboard functionality including fetching, displaying, and managing transactions
 * 
 * FEATURES:
 * - Export to CSV
 * - Print Receipts
 * - Bulk Actions
 * - Quick Stats Filters
 * - Sort Columns
 * - Date Range Filter
 * - Photo Preview
 * - Email Delivery Dashboard
 * - Print Queue Management
 * - Analytics Charts
 * - Dark Mode Toggle
 */

// ============================================
// CONFIGURATION
// ============================================

const API_BASE_URL = 'http://localhost:5000/api';
const REFRESH_INTERVAL = 30000; // 30 seconds

// ============================================
// STATE MANAGEMENT
// ============================================

let state = {
  transactions: [],
  filteredTransactions: [],
  statistics: {},
  currentFilter: 'all',
  searchTerm: '',
  isLoading: false,
  selectedOrders: new Set(),
  sortField: 'created_at',
  sortDirection: 'desc',
  dateFrom: null,
  dateTo: null,
  activeStatFilter: null,
  currentTransaction: null
};

// ============================================
// INITIALIZATION
// ============================================

document.addEventListener('DOMContentLoaded', () => {
  initializeApp();
});

async function initializeApp() {
  console.log('Initializing dashboard...');
  
  // Initialize dark mode
  initializeDarkMode();
  
  // Set up event listeners
  setupEventListeners();
  
  // Initial data load
  await loadDashboardData();
  
  // Set up auto-refresh
  setInterval(loadDashboardData, REFRESH_INTERVAL);
  
  console.log('Dashboard initialized successfully');
}

// ============================================
// DARK MODE
// ============================================

function initializeDarkMode() {
  const savedTheme = localStorage.getItem('theme') || 'light';
  document.body.dataset.theme = savedTheme;
  updateDarkModeIcon(savedTheme);
}

function toggleDarkMode() {
  const currentTheme = document.body.dataset.theme || 'light';
  const newTheme = currentTheme === 'light' ? 'dark' : 'light';
  
  document.body.dataset.theme = newTheme;
  localStorage.setItem('theme', newTheme);
  updateDarkModeIcon(newTheme);
  
  showToast(`${newTheme === 'dark' ? 'Dark' : 'Light'} mode enabled`, 'info');
}

function updateDarkModeIcon(theme) {
  const icon = document.getElementById('darkModeIcon');
  icon.textContent = theme === 'dark' ? '☀️' : '🌙';
}

// ============================================
// EVENT LISTENERS
// ============================================

function setupEventListeners() {
  // Dark mode toggle
  document.getElementById('darkModeToggle').addEventListener('click', toggleDarkMode);
  
  // Analytics button
  document.getElementById('analyticsBtn').addEventListener('click', openAnalyticsModal);
  
  // Refresh button
  document.getElementById('refreshBtn').addEventListener('click', async () => {
    await loadDashboardData();
    showToast('Data refreshed successfully', 'success');
  });
  
  // Search - live search as user types
  document.getElementById('searchBtn').addEventListener('click', handleSearch);
  document.getElementById('searchInput').addEventListener('input', handleSearch); // Live search
  document.getElementById('searchInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  });
  
  // Clear search
  document.getElementById('clearSearchBtn').addEventListener('click', () => {
    document.getElementById('searchInput').value = '';
    state.searchTerm = '';
    filterAndRenderTransactions();
  });
  
  // Status filter
  document.getElementById('statusFilter').addEventListener('change', (e) => {
    state.currentFilter = e.target.value;
    filterAndRenderTransactions();
  });
  
  // Date filters
  document.getElementById('dateFrom').addEventListener('change', applyDateFilter);
  document.getElementById('dateTo').addEventListener('change', applyDateFilter);
  document.getElementById('clearDatesBtn').addEventListener('click', clearDateFilter);
  
  // Export CSV
  document.getElementById('exportCSVBtn').addEventListener('click', exportToCSV);
  
  // Print Queue
  document.getElementById('printQueueBtn').addEventListener('click', openPrintQueueModal);
  
  // Email Dashboard
  document.getElementById('emailDashboardBtn').addEventListener('click', openEmailDashboardModal);
  
  // Bulk actions
  document.getElementById('selectAllCheckbox').addEventListener('change', handleSelectAll);
  document.getElementById('bulkCompleteBtn').addEventListener('click', bulkMarkComplete);
  document.getElementById('bulkPrintBtn').addEventListener('click', bulkPrintReceipts);
  document.getElementById('bulkDeselectBtn').addEventListener('click', deselectAll);
  
  // Stats card filters
  document.querySelectorAll('.stat-card.clickable').forEach(card => {
    card.addEventListener('click', () => handleStatCardClick(card));
  });
  
  // Modal close handlers
  setupModalCloseHandlers('detailModal', ['modalClose', 'modalCloseBtn', 'modalOverlay']);
  setupModalCloseHandlers('analyticsModal', ['analyticsClose', 'analyticsCloseBtn', 'analyticsOverlay']);
  setupModalCloseHandlers('printQueueModal', ['printQueueClose', 'printQueueCloseBtn', 'printQueueOverlay']);
  setupModalCloseHandlers('emailDashboardModal', ['emailDashboardClose', 'emailDashboardCloseBtn', 'emailDashboardOverlay']);
  
  // Print receipt button
  document.getElementById('printReceiptBtn').addEventListener('click', () => {
    if (state.currentTransaction) {
      printReceipt(state.currentTransaction.customer_number);
    }
  });
  
  // Setup sortable headers
  setTimeout(() => {
    document.querySelectorAll('.sortable').forEach(th => {
      th.style.cursor = 'pointer';
      th.addEventListener('click', () => sortTransactions(th.dataset.sort));
    });
  }, 100);
}

function setupModalCloseHandlers(modalId, elementIds) {
  const modal = document.getElementById(modalId);
  elementIds.forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener('click', () => closeModal(modalId));
    }
  });
}

// ============================================
// DATA FETCHING
// ============================================

async function loadDashboardData() {
  if (state.isLoading) return;
  
  state.isLoading = true;
  updateConnectionStatus('loading');
  
  try {
    // Fetch statistics and transactions in parallel
    const [statsResponse, transactionsResponse] = await Promise.all([
      fetch(`${API_BASE_URL}/statistics`),
      fetch(`${API_BASE_URL}/transactions`)
    ]);
    
    if (!statsResponse.ok || !transactionsResponse.ok) {
      throw new Error('Failed to fetch data');
    }
    
    const statsData = await statsResponse.json();
    const transactionsData = await transactionsResponse.json();
    
    // Update state
    state.statistics = statsData.statistics;
    state.transactions = transactionsData.transactions;
    
    // Update UI
    renderStatistics();
    filterAndRenderTransactions();
    
    updateConnectionStatus('online');
  } catch (error) {
    console.error('Error loading dashboard data:', error);
    updateConnectionStatus('offline');
    showToast('Failed to load data. Retrying...', 'error');
  } finally {
    state.isLoading = false;
  }
}

// ============================================
// RENDERING FUNCTIONS
// ============================================

function renderStatistics() {
  const { totalOrders, totalRevenue, pendingOrders, todayOrders } = state.statistics;
  
  document.getElementById('totalOrders').textContent = totalOrders || 0;
  document.getElementById('totalRevenue').textContent = formatCurrency(totalRevenue || 0);
  document.getElementById('pendingOrders').textContent = pendingOrders || 0;
  document.getElementById('todayOrders').textContent = todayOrders || 0;
}

function filterAndRenderTransactions() {
  // Start with all transactions
  let filtered = [...state.transactions];
  
  // Apply search filter
  if (state.searchTerm) {
    filtered = filtered.filter(t => {
      const searchLower = state.searchTerm.toLowerCase();
      return (
        t.customer_number.toString().toLowerCase().includes(searchLower) ||
        t.customer_name.toLowerCase().includes(searchLower) ||
        t.background_name.toLowerCase().includes(searchLower)
      );
    });
  }
  
  // Apply status filter
  if (state.currentFilter !== 'all') {
    filtered = filtered.filter(t => {
      switch (state.currentFilter) {
        case 'pending':
          return t.status_picked_up === 0;
        case 'completed':
          return t.status_picked_up === 1;
        case 'unpaid':
          return t.status_paid === 0;
        default:
          return true;
      }
    });
  }
  
  // Apply stat card filter
  if (state.activeStatFilter) {
    filtered = filtered.filter(t => {
      switch (state.activeStatFilter) {
        case 'pending':
          return t.status_picked_up === 0;
        case 'today':
          const today = new Date().toDateString();
          const tDate = new Date(t.created_at).toDateString();
          return today === tDate;
        case 'revenue':
          return t.status_paid === 1;
        case 'all':
        default:
          return true;
      }
    });
  }
  
  // Apply date range filter
  if (state.dateFrom || state.dateTo) {
    filtered = filtered.filter(t => {
      const tDate = new Date(t.created_at);
      if (state.dateFrom && tDate < state.dateFrom) return false;
      if (state.dateTo && tDate > state.dateTo) return false;
      return true;
    });
  }
  
  // Apply sorting
  filtered.sort((a, b) => {
    let aVal = a[state.sortField];
    let bVal = b[state.sortField];
    
    // Handle numeric and string comparisons
    if (typeof aVal === 'number' && typeof bVal === 'number') {
      return state.sortDirection === 'asc' ? aVal - bVal : bVal - aVal;
    }
    
    // String comparison
    aVal = String(aVal).toLowerCase();
    bVal = String(bVal).toLowerCase();
    
    if (state.sortDirection === 'asc') {
      return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
    } else {
      return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
    }
  });
  
  state.filteredTransactions = filtered;
  renderTransactions();
  updateSortIcons();
}

function renderTransactions() {
  const tbody = document.getElementById('transactionsBody');
  const countElement = document.getElementById('transactionCount');
  
  // Update count
  countElement.textContent = `Showing ${state.filteredTransactions.length} of ${state.transactions.length} orders`;
  
  // Clear existing rows
  tbody.innerHTML = '';
  
  // Handle empty state
  if (state.filteredTransactions.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="12" class="empty-cell">
          <p>No transactions found</p>
          ${state.searchTerm || state.currentFilter !== 'all' || state.activeStatFilter ? '<p style="margin-top: 8px; font-size: 14px;">Try adjusting your filters</p>' : ''}
        </td>
      </tr>
    `;
    return;
  }
  
  // Render transactions
  state.filteredTransactions.forEach(transaction => {
    const row = createTransactionRow(transaction);
    tbody.appendChild(row);
  });
  
  // Update select all checkbox state
  updateSelectAllCheckbox();
}

function createTransactionRow(t) {
  const row = document.createElement('tr');
  const status = getTransactionStatus(t);
  const isSelected = state.selectedOrders.has(t.customer_number);
  
  row.innerHTML = `
    <td>
      <input type="checkbox" class="row-checkbox" data-customer-number="${t.customer_number}" ${isSelected ? 'checked' : ''}>
    </td>
    <td>
      <span class="customer-number">#${t.customer_number}</span>
    </td>
    <td>
      ${t.customer_photo_path 
        ? `<img src="${t.customer_photo_path}" alt="Customer photo" class="photo-thumbnail" onclick="viewPhoto('${t.customer_photo_path}')" title="Click to enlarge">`
        : '<span class="no-photo">No Photo</span>'
      }
    </td>
    <td>${escapeHtml(t.customer_name)}</td>
    <td>${t.party_size}</td>
    <td>${escapeHtml(t.background_name)}</td>
    <td>${formatDeliveryMethod(t.delivery_method)}</td>
    <td>${formatPaymentMethod(t.payment_method)}</td>
    <td><span class="price">${formatCurrency(t.total_price)}</span></td>
    <td>
      <span class="status-badge ${status.class}">${status.label}</span>
    </td>
    <td>
      <div class="timestamp">${formatTimestamp(t.created_at)}</div>
    </td>
    <td>
      <button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails('${t.customer_number}')">
        View
      </button>
    </td>
  `;
  
  // Add checkbox change listener
  const checkbox = row.querySelector('.row-checkbox');
  checkbox.addEventListener('change', (e) => {
    handleRowCheckboxChange(t.customer_number, e.target.checked);
  });
  
  return row;
}

// ============================================
// SORTING
// ============================================

function sortTransactions(field) {
  if (state.sortField === field) {
    state.sortDirection = state.sortDirection === 'asc' ? 'desc' : 'asc';
  } else {
    state.sortField = field;
    state.sortDirection = 'asc';
  }
  filterAndRenderTransactions();
}

function updateSortIcons() {
  document.querySelectorAll('.sortable').forEach(th => {
    const sortField = th.dataset.sort;
    const icon = th.querySelector('.sort-icon');
    
    if (sortField === state.sortField) {
      icon.textContent = state.sortDirection === 'asc' ? ' ▲' : ' ▼';
      icon.style.opacity = '1';
    } else {
      icon.textContent = ' ▼';
      icon.style.opacity = '0.3';
    }
  });
}

// ============================================
// STAT CARD FILTERS
// ============================================

function handleStatCardClick(card) {
  const filter = card.dataset.filter;
  
  // Toggle active state
  document.querySelectorAll('.stat-card.clickable').forEach(c => c.classList.remove('active'));
  
  if (state.activeStatFilter === filter) {
    // Clicking the same card again - clear filter
    state.activeStatFilter = null;
  } else {
    // Set new filter
    state.activeStatFilter = filter;
    card.classList.add('active');
  }
  
  filterAndRenderTransactions();
}

// ============================================
// DATE FILTERING
// ============================================

function applyDateFilter() {
  const dateFrom = document.getElementById('dateFrom').value;
  const dateTo = document.getElementById('dateTo').value;
  
  state.dateFrom = dateFrom ? new Date(dateFrom + 'T00:00:00') : null;
  state.dateTo = dateTo ? new Date(dateTo + 'T23:59:59') : null;
  
  filterAndRenderTransactions();
}

function clearDateFilter() {
  document.getElementById('dateFrom').value = '';
  document.getElementById('dateTo').value = '';
  state.dateFrom = null;
  state.dateTo = null;
  filterAndRenderTransactions();
}

// ============================================
// BULK ACTIONS
// ============================================

function handleSelectAll(e) {
  const isChecked = e.target.checked;
  
  state.filteredTransactions.forEach(t => {
    if (isChecked) {
      state.selectedOrders.add(t.customer_number);
    } else {
      state.selectedOrders.delete(t.customer_number);
    }
  });
  
  // Update all visible checkboxes
  document.querySelectorAll('.row-checkbox').forEach(cb => {
    cb.checked = isChecked;
  });
  
  updateBulkActions();
}

function handleRowCheckboxChange(customerNumber, isChecked) {
  if (isChecked) {
    state.selectedOrders.add(customerNumber);
  } else {
    state.selectedOrders.delete(customerNumber);
  }
  
  updateBulkActions();
  updateSelectAllCheckbox();
}

function updateSelectAllCheckbox() {
  const selectAllCheckbox = document.getElementById('selectAllCheckbox');
  const visibleCustomerNumbers = state.filteredTransactions.map(t => t.customer_number);
  const allVisibleSelected = visibleCustomerNumbers.every(num => state.selectedOrders.has(num));
  const someVisibleSelected = visibleCustomerNumbers.some(num => state.selectedOrders.has(num));
  
  selectAllCheckbox.checked = allVisibleSelected && visibleCustomerNumbers.length > 0;
  selectAllCheckbox.indeterminate = someVisibleSelected && !allVisibleSelected;
}

function updateBulkActions() {
  const bulkBar = document.getElementById('bulkActionsBar');
  const bulkCount = document.getElementById('bulkCount');
  
  if (state.selectedOrders.size > 0) {
    bulkBar.style.display = 'flex';
    bulkCount.textContent = `${state.selectedOrders.size} selected`;
  } else {
    bulkBar.style.display = 'none';
  }
}

async function bulkMarkComplete() {
  if (state.selectedOrders.size === 0) return;
  
  const confirmed = confirm(`Mark ${state.selectedOrders.size} order(s) as complete?`);
  if (!confirmed) return;
  
  try {
    const promises = Array.from(state.selectedOrders).map(customerNumber =>
      fetch(`${API_BASE_URL}/transactions/${customerNumber}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ field: 'status_picked_up', value: true })
      })
    );
    
    await Promise.all(promises);
    
    // Update local state
    state.selectedOrders.forEach(customerNumber => {
      const transaction = state.transactions.find(t => t.customer_number === customerNumber);
      if (transaction) {
        transaction.status_picked_up = 1;
      }
    });
    
    deselectAll();
    filterAndRenderTransactions();
    showToast(`Successfully marked ${promises.length} order(s) as complete`, 'success');
  } catch (error) {
    console.error('Error in bulk update:', error);
    showToast('Failed to update some orders', 'error');
  }
}

function bulkPrintReceipts() {
  if (state.selectedOrders.size === 0) return;
  
  Array.from(state.selectedOrders).forEach(customerNumber => {
    setTimeout(() => printReceipt(customerNumber), 100);
  });
}

function deselectAll() {
  state.selectedOrders.clear();
  document.querySelectorAll('.row-checkbox').forEach(cb => cb.checked = false);
  document.getElementById('selectAllCheckbox').checked = false;
  updateBulkActions();
}

// ============================================
// EXPORT TO CSV
// ============================================

function exportToCSV() {
  const headers = [
    'Order #',
    'Customer Name',
    'Party Size',
    'Background',
    'Delivery Method',
    'Payment Method',
    'Total Price',
    'Status',
    'Photo Taken',
    'Paid',
    'Emails Sent',
    'Prints Ready',
    'Picked Up',
    'Created At',
    'Operator Notes'
  ];
  
  const rows = state.filteredTransactions.map(t => {
    const status = getTransactionStatus(t);
    return [
      t.customer_number,
      t.customer_name,
      t.party_size,
      t.background_name,
      formatDeliveryMethod(t.delivery_method),
      formatPaymentMethod(t.payment_method),
      t.total_price,
      status.label,
      t.status_photo_taken ? 'Yes' : 'No',
      t.status_paid ? 'Yes' : 'No',
      t.status_emails_sent ? 'Yes' : 'No',
      t.status_prints_ready ? 'Yes' : 'No',
      t.status_picked_up ? 'Yes' : 'No',
      new Date(t.created_at).toLocaleString(),
      (t.operator_notes || '').replace(/"/g, '""')
    ];
  });
  
  const csvContent = [
    headers.map(h => `"${h}"`).join(','),
    ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `greenscreen-orders-${new Date().toISOString().split('T')[0]}.csv`;
  link.click();
  URL.revokeObjectURL(url);
  
  showToast(`Exported ${rows.length} order(s) to CSV`, 'success');
}

// ============================================
// PRINT RECEIPT
// ============================================

function printReceipt(customerNumber) {
  const transaction = state.transactions.find(t => t.customer_number === customerNumber);
  if (!transaction) {
    showToast('Transaction not found', 'error');
    return;
  }
  
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    showToast('Please allow popups to print receipts', 'warning');
    return;
  }
  
  const emailList = transaction.email_addresses 
    ? JSON.parse(transaction.email_addresses).map(e => e.value || e).join(', ')
    : 'None';
  
  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>Receipt #${transaction.customer_number}</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            padding: 20px;
            max-width: 400px;
            margin: 0 auto;
          }
          h1 {
            text-align: center;
            font-size: 24px;
            margin-bottom: 10px;
          }
          h2 {
            text-align: center;
            font-size: 18px;
            margin-bottom: 20px;
            color: #666;
          }
          .section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
          }
          .line-item {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            padding: 5px 0;
          }
          .line-item.total {
            border-top: 2px solid #333;
            margin-top: 15px;
            padding-top: 10px;
            font-weight: bold;
            font-size: 18px;
          }
          .label {
            color: #666;
          }
          .value {
            font-weight: 500;
          }
          .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px dashed #999;
            color: #666;
          }
          @media print {
            button { display: none; }
          }
        </style>
      </head>
      <body>
        <h1>🎬 Greenscreen Kiosk</h1>
        <h2>Order Receipt</h2>
        
        <div class="section">
          <div class="line-item">
            <span class="label">Order #:</span>
            <span class="value" style="color: #2563eb; font-weight: bold;">${transaction.customer_number}</span>
          </div>
          <div class="line-item">
            <span class="label">Customer:</span>
            <span class="value">${escapeHtml(transaction.customer_name)}</span>
          </div>
          <div class="line-item">
            <span class="label">Date:</span>
            <span class="value">${new Date(transaction.created_at).toLocaleString()}</span>
          </div>
        </div>
        
        <div class="section">
          <div class="line-item">
            <span class="label">Party Size:</span>
            <span class="value">${transaction.party_size} ${transaction.party_size === 1 ? 'person' : 'people'}</span>
          </div>
          <div class="line-item">
            <span class="label">Background:</span>
            <span class="value">${escapeHtml(transaction.background_name)}</span>
          </div>
          <div class="line-item">
            <span class="label">Delivery:</span>
            <span class="value">${formatDeliveryMethod(transaction.delivery_method)}</span>
          </div>
          ${transaction.print_quantity > 0 ? `
            <div class="line-item">
              <span class="label">Print Copies:</span>
              <span class="value">${transaction.print_quantity}</span>
            </div>
          ` : ''}
          ${transaction.email_count > 0 ? `
            <div class="line-item">
              <span class="label">Email To:</span>
              <span class="value" style="font-size: 12px;">${emailList}</span>
            </div>
          ` : ''}
          <div class="line-item">
            <span class="label">Payment:</span>
            <span class="value">${formatPaymentMethod(transaction.payment_method)}</span>
          </div>
        </div>
        
        <div class="section">
          <div class="line-item total">
            <span class="label">TOTAL:</span>
            <span class="value" style="color: #10b981;">$${transaction.total_price.toFixed(2)}</span>
          </div>
        </div>
        
        <div class="footer">
          <p>Thank you for your order!</p>
          <p style="font-size: 12px; margin-top: 10px;">Please keep this receipt for your records</p>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
          <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background: #2563eb; color: white; border: none; border-radius: 5px;">
            Print Receipt
          </button>
        </div>
      </body>
    </html>
  `);
  printWindow.document.close();
}

// ============================================
// PHOTO VIEWER
// ============================================

function viewPhoto(photoPath) {
  const photoWindow = window.open('', '_blank');
  if (!photoWindow) {
    showToast('Please allow popups to view photos', 'warning');
    return;
  }
  
  photoWindow.document.write(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>Customer Photo</title>
        <style>
          body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: #000;
          }
          img {
            max-width: 100%;
            max-height: 100vh;
            object-fit: contain;
          }
        </style>
      </head>
      <body>
        <img src="${photoPath}" alt="Customer photo">
      </body>
    </html>
  `);
  photoWindow.document.close();
}

// ============================================
// TRANSACTION DETAILS MODAL
// ============================================

async function viewTransactionDetails(customerNumber) {
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}`);
    
    if (!response.ok) {
      throw new Error('Transaction not found');
    }
    
    const data = await response.json();
    const transaction = data.transaction;
    
    state.currentTransaction = transaction;
    renderTransactionModal(transaction);
    openModal('detailModal');
  } catch (error) {
    console.error('Error loading transaction details:', error);
    showToast('Failed to load transaction details', 'error');
  }
}

function renderTransactionModal(t) {
  const modalBody = document.getElementById('modalBody');
  
  const emailAddresses = t.emailAddresses || (t.email_addresses ? JSON.parse(t.email_addresses) : []);
  const emailList = emailAddresses.map(e => e.value || e).join(', ') || 'None';
  
  modalBody.innerHTML = `
    <div style="display: grid; gap: 24px;">
      <!-- Customer Info -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Customer Information
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Order Number:</span>
            <span style="font-weight: 600; color: var(--color-primary);">#${t.customer_number}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Customer Name:</span>
            <span style="font-weight: 500;">${escapeHtml(t.customer_name)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Party Size:</span>
            <span>${t.party_size} ${t.party_size === 1 ? 'person' : 'people'}</span>
          </div>
          ${t.customer_photo_path ? `
            <div style="margin-top: 8px;">
              <span style="color: var(--text-secondary); display: block; margin-bottom: 8px;">Customer Photo:</span>
              <img src="${t.customer_photo_path}" alt="Customer photo" style="max-width: 200px; border-radius: 8px; border: 1px solid var(--color-gray-200); cursor: pointer;" onclick="viewPhoto('${t.customer_photo_path}')">
            </div>
          ` : ''}
        </div>
      </div>
      
      <!-- Order Details -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Order Details
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Background:</span>
            <span style="font-weight: 500;">${escapeHtml(t.background_name)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Delivery Method:</span>
            <span>${formatDeliveryMethod(t.delivery_method)}</span>
          </div>
          ${t.print_quantity > 0 ? `
            <div style="display: flex; justify-content: space-between;">
              <span style="color: var(--text-secondary);">Print Quantity:</span>
              <span>${t.print_quantity}</span>
            </div>
          ` : ''}
          ${emailAddresses.length > 0 ? `
            <div style="display: flex; justify-content: space-between;">
              <span style="color: var(--text-secondary);">Email Addresses:</span>
              <span style="text-align: right;">${emailList}</span>
            </div>
          ` : ''}
        </div>
      </div>
      
      <!-- Payment Info -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Payment Information
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Payment Method:</span>
            <span>${formatPaymentMethod(t.payment_method)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Total Amount:</span>
            <span style="font-size: 20px; font-weight: 700; color: var(--color-success);">${formatCurrency(t.total_price)}</span>
          </div>
        </div>
      </div>
      
      <!-- Status Checklist -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Order Status
        </h3>
        <div style="display: grid; gap: 12px;">
          ${createStatusCheckbox(t, 'status_photo_taken', 'Photo Taken')}
          ${createStatusCheckbox(t, 'status_paid', 'Payment Received')}
          ${createStatusCheckbox(t, 'status_emails_sent', 'Emails Sent')}
          ${createStatusCheckbox(t, 'status_prints_ready', 'Prints Ready')}
          ${createStatusCheckbox(t, 'status_picked_up', 'Order Picked Up')}
        </div>
      </div>
      
      <!-- Operator Notes -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Operator Notes
        </h3>
        <textarea 
          id="operatorNotes" 
          rows="4" 
          style="width: 100%; padding: 12px; font-family: var(--font-family); font-size: 14px; border: 1px solid var(--color-gray-300); border-radius: 8px; resize: vertical;"
          placeholder="Add notes about this order..."
        >${t.operator_notes || ''}</textarea>
        <button class="btn btn-primary mt-4" onclick="saveOperatorNotes('${t.customer_number}')">
          Save Notes
        </button>
      </div>
      
      <!-- Metadata -->
      <div style="padding-top: 16px; border-top: 1px solid var(--color-gray-200);">
        <div style="display: grid; gap: 8px; font-size: 13px; color: var(--text-muted);">
          <div>Created: ${formatFullTimestamp(t.created_at)}</div>
          <div>Last Updated: ${formatFullTimestamp(t.updated_at)}</div>
          ${t.event_name ? `<div>Event: ${escapeHtml(t.event_name)}</div>` : ''}
        </div>
      </div>
    </div>
  `;
}

function createStatusCheckbox(transaction, field, label) {
  const isChecked = transaction[field] === 1;
  const checkboxId = `checkbox_${field}_${transaction.customer_number}`;
  
  return `
    <label style="display: flex; align-items: center; gap: 12px; padding: 12px; background: var(--bg-hover); border-radius: 8px; cursor: pointer;">
      <input
        type="checkbox"
        id="${checkboxId}"
        ${isChecked ? 'checked' : ''}
        onchange="updateTransactionStatus('${transaction.customer_number}', '${field}', this.checked)"
        style="width: 18px; height: 18px; cursor: pointer;"
      >
      <span style="font-weight: 500;">${label}</span>
    </label>
  `;
}

// ============================================
// API ACTIONS
// ============================================

async function updateTransactionStatus(customerNumber, field, value) {
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}/status`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ field, value })
    });
    
    if (!response.ok) {
      throw new Error('Failed to update status');
    }
    
    // Update local state
    const transaction = state.transactions.find(t => t.customer_number === customerNumber);
    if (transaction) {
      transaction[field] = value ? 1 : 0;
      filterAndRenderTransactions();
    }
    
    showToast('Status updated successfully', 'success');
  } catch (error) {
    console.error('Error updating status:', error);
    showToast('Failed to update status', 'error');
    
    // Revert checkbox
    const checkbox = document.getElementById(`checkbox_${field}_${customerNumber}`);
    if (checkbox) {
      checkbox.checked = !value;
    }
  }
}

async function saveOperatorNotes(customerNumber) {
  const notes = document.getElementById('operatorNotes').value;
  
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}/notes`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ notes })
    });
    
    if (!response.ok) {
      throw new Error('Failed to save notes');
    }
    
    // Update local state
    const transaction = state.transactions.find(t => t.customer_number === customerNumber);
    if (transaction) {
      transaction.operator_notes = notes;
    }
    
    showToast('Notes saved successfully', 'success');
  } catch (error) {
    console.error('Error saving notes:', error);
    showToast('Failed to save notes', 'error');
  }
}

async function handleSearch() {
  const searchInput = document.getElementById('searchInput');
  const query = searchInput.value.trim();
  
  if (!query) {
    showToast('Please enter a search term', 'warning');
    return;
  }
  
  state.searchTerm = query;
  filterAndRenderTransactions();
}

// ============================================
// ANALYTICS MODAL
// ============================================

function openAnalyticsModal() {
  openModal('analyticsModal');
  
  // Set default date to today
  setTimeout(() => {
    const dateSelector = document.getElementById('ordersDateSelector');
    if (dateSelector && !dateSelector.value) {
      dateSelector.value = new Date().toISOString().split('T')[0];
      
      // Add change listener
      dateSelector.removeEventListener('change', createOrdersTimeChart); // Remove if exists
      dateSelector.addEventListener('change', createOrdersTimeChart);
    }
    
    renderAnalytics();
  }, 100); // Give modal time to render
}

function renderAnalytics() {
  createRevenueChart();
  createBackgroundsChart();
  createOrdersTimeChart();
  createDeliveryChart();
}

function createRevenueChart() {
  const canvas = document.getElementById('revenueChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Group by date and sum revenue
  const revenueByDate = {};
  state.transactions.forEach(t => {
    // Handle both formats: "YYYY-MM-DD HH:MM:SS" (space) and "YYYY-MM-DDTHH:MM:SS" (T)
    const date = t.created_at.split(' ')[0] || t.created_at.split('T')[0];
    revenueByDate[date] = (revenueByDate[date] || 0) + parseFloat(t.total_price);
  });
  
  const sortedDates = Object.keys(revenueByDate).sort();
  const revenues = sortedDates.map(date => revenueByDate[date]);

  new Chart(ctx, {
    type: 'line',
    data: {
      // FIX: Parse date correctly to avoid timezone issues
      // When date is "2025-10-22", we want to display "Oct 22", not "Oct 21"
      labels: sortedDates.map(d => {
        const [year, month, day] = d.split('-').map(Number);
        const localDate = new Date(year, month - 1, day);
        return localDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      }),
      datasets: [{
        label: 'Revenue ($)',
        data: revenues,
        borderColor: 'rgb(37, 99, 235)',
        backgroundColor: 'rgba(37, 99, 235, 0.1)',
        tension: 0.3,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              return '$' + value.toFixed(0);
            }
          }
        }
      }
    }
  });
}

function createBackgroundsChart() {
  const canvas = document.getElementById('backgroundsChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Count backgrounds
  const backgroundCounts = {};
  state.transactions.forEach(t => {
    const bg = t.background_name;
    backgroundCounts[bg] = (backgroundCounts[bg] || 0) + 1;
  });
  
  // Sort by count and take top 10
  const sortedBackgrounds = Object.entries(backgroundCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);
  
  const labels = sortedBackgrounds.map(([bg]) => bg);
  const data = sortedBackgrounds.map(([, count]) => count);
  
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Orders',
        data: data,
        backgroundColor: 'rgba(16, 185, 129, 0.8)',
        borderColor: 'rgb(16, 185, 129)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            stepSize: 1
          }
        }
      }
    }
  });
}

async function createOrdersTimeChart() {
  const canvas = document.getElementById('ordersTimeChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Get selected date or default to today
  const dateSelector = document.getElementById('ordersDateSelector');
  const selectedDate = dateSelector ? dateSelector.value : new Date().toISOString().split('T')[0];
  
  try {
    // Fetch hourly data from API
    const response = await fetch(`${API_BASE_URL}/analytics/orders-by-hour?date=${selectedDate}`);
    if (!response.ok) throw new Error('Failed to fetch hourly data');
    
    const data = await response.json();
    const hourCounts = data.hourlyData;
    
    const labels = hourCounts.map((_, i) => {
      const hour = i % 12 || 12;
      const ampm = i < 12 ? 'AM' : 'PM';
      return `${hour}${ampm}`;
    });
    
    // Destroy existing chart if it exists
    if (window.ordersTimeChartInstance) {
      window.ordersTimeChartInstance.destroy();
    }
    
    // Parse date correctly to avoid timezone issues
    // When date is "2025-10-22", we want to display "Oct 22", not "Oct 21"
    const [year, month, day] = selectedDate.split('-').map(Number);
    const localDate = new Date(year, month - 1, day);

    window.ordersTimeChartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Orders',
          data: hourCounts,
          backgroundColor: 'rgba(245, 158, 11, 0.8)',
          borderColor: 'rgb(245, 158, 11)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: `Orders by Hour - ${localDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`,
            font: {
              size: 14,
              weight: 'bold'
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1
            }
          }
        }
      }
    });
  } catch (error) {
    console.error('Error creating orders time chart:', error);
    showToast('Failed to load hourly data', 'error');
  }
}

function createDeliveryChart() {
  const canvas = document.getElementById('deliveryChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Count delivery methods
  const deliveryCounts = { print: 0, email: 0, both: 0 };
  state.transactions.forEach(t => {
    deliveryCounts[t.delivery_method]++;
  });
  
  new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Print Only', 'Email Only', 'Both'],
      datasets: [{
        data: [deliveryCounts.print, deliveryCounts.email, deliveryCounts.both],
        backgroundColor: [
          'rgba(59, 130, 246, 0.8)',
          'rgba(168, 85, 247, 0.8)',
          'rgba(236, 72, 153, 0.8)'
        ],
        borderColor: [
          'rgb(59, 130, 246)',
          'rgb(168, 85, 247)',
          'rgb(236, 72, 153)'
        ],
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          position: 'bottom'
        }
      }
    }
  });
}

// ============================================
// PRINT QUEUE MODAL
// ============================================

function openPrintQueueModal() {
  renderPrintQueue();
  openModal('printQueueModal');
}

function renderPrintQueue() {
  const body = document.getElementById('printQueueBody');

  const printOrders = state.transactions.filter(t =>
    t.delivery_method === 'print' || t.delivery_method === 'both'
  );

  const ready = printOrders.filter(t => t.status_prints_ready === 1 && t.status_picked_up === 0);
  const pending = printOrders.filter(t => t.status_prints_ready === 0);
  const pickedUp = printOrders.filter(t => t.status_picked_up === 1);

  // Filter based on hideCompleted checkbox state
  const hideCompleted = window.hidePrintCompleted || false;
  const displayedOrders = hideCompleted ? [...pending, ...ready] : [...pending, ...ready, ...pickedUp];

  body.innerHTML = `
    <div class="print-queue">
      <div class="queue-stats">
        <div class="queue-stat ready">
          <div class="stat-icon">✅</div>
          <div>
            <div class="stat-label">Ready for Pickup</div>
            <div class="stat-value">${ready.length}</div>
          </div>
        </div>
        <div class="queue-stat pending">
          <div class="stat-icon">⏳</div>
          <div>
            <div class="stat-label">Pending Print</div>
            <div class="stat-value">${pending.length}</div>
          </div>
        </div>
        <div class="queue-stat completed">
          <div class="stat-icon">📦</div>
          <div>
            <div class="stat-label">Picked Up</div>
            <div class="stat-value">${pickedUp.length}</div>
          </div>
        </div>
      </div>

      <div style="margin-top: 24px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <h3 style="font-size: 16px; font-weight: 600; margin: 0;">Print Queue Details</h3>
        <label style="display: flex; align-items: center; gap: 8px; font-size: 14px; cursor: pointer;">
          <input type="checkbox" id="hidePrintCompletedCheckbox" ${hideCompleted ? 'checked' : ''}
                 onchange="toggleHidePrintCompleted()" style="cursor: pointer;">
          <span>Hide Completed</span>
        </label>
      </div>

      <div>
        <table class="print-queue-table">
          <thead>
            <tr>
              <th>Order #</th>
              <th>Customer</th>
              <th>Copies</th>
              <th>Background</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${displayedOrders.length === 0
              ? '<tr><td colspan="6" style="text-align: center; padding: 20px; color: var(--text-muted);">No print orders in queue</td></tr>'
              : displayedOrders.map(t => `
                <tr>
                  <td><span class="customer-number">#${t.customer_number}</span></td>
                  <td>${escapeHtml(t.customer_name)}</td>
                  <td>${t.print_quantity || 1}</td>
                  <td>${escapeHtml(t.background_name)}</td>
                  <td>
                    <span class="status-badge ${t.status_picked_up ? 'completed' : (t.status_prints_ready ? 'completed' : 'pending')}">
                      ${t.status_picked_up ? 'Picked Up' : (t.status_prints_ready ? 'Ready' : 'Pending')}
                    </span>
                  </td>
                  <td>
                    ${!t.status_prints_ready
                      ? `<button class="btn btn-sm btn-success" onclick="markPrintReady('${t.customer_number}')">Mark Ready</button>`
                      : `<button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails('${t.customer_number}')">View</button>`
                    }
                  </td>
                </tr>
              `).join('')
            }
          </tbody>
        </table>
      </div>
    </div>
  `;
}

async function markPrintReady(customerNumber) {
  try {
    await updateTransactionStatus(customerNumber, 'status_prints_ready', true);
    renderPrintQueue(); // Refresh the print queue
    showToast('Print marked as ready', 'success');
  } catch (error) {
    showToast('Failed to update print status', 'error');
  }
}

function toggleHidePrintCompleted() {
  window.hidePrintCompleted = !window.hidePrintCompleted;
  renderPrintQueue();
}

// ============================================
// EMAIL DASHBOARD MODAL
// ============================================

function openEmailDashboardModal() {
  renderEmailDashboard();
  openModal('emailDashboardModal');
}

function renderEmailDashboard() {
  const body = document.getElementById('emailDashboardBody');

  const emailOrders = state.transactions.filter(t =>
    t.delivery_method === 'email' || t.delivery_method === 'both'
  );

  const sent = emailOrders.filter(t => t.status_emails_sent === 1);
  const pending = emailOrders.filter(t => t.status_emails_sent === 0);

  // Sort: pending first, then sent (important items at top)
  const sortedEmailOrders = [...pending, ...sent];

  // Filter based on hideCompleted checkbox state
  const hideCompleted = window.hideEmailCompleted || false;
  const displayedOrders = hideCompleted ? pending : sortedEmailOrders;

  body.innerHTML = `
    <div class="email-dashboard">
      <div class="email-stats">
        <div class="email-stat">
          <div class="stat-icon">📧</div>
          <div>
            <div class="stat-label">Total Email Orders</div>
            <div class="stat-value">${emailOrders.length}</div>
          </div>
        </div>
        <div class="email-stat success">
          <div class="stat-icon">✅</div>
          <div>
            <div class="stat-label">Emails Sent</div>
            <div class="stat-value">${sent.length}</div>
          </div>
        </div>
        <div class="email-stat warning">
          <div class="stat-icon">⏳</div>
          <div>
            <div class="stat-label">Pending</div>
            <div class="stat-value">${pending.length}</div>
          </div>
        </div>
      </div>

      <div style="margin-top: 24px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <h3 style="font-size: 16px; font-weight: 600; margin: 0;">Email Delivery Status</h3>
        <label style="display: flex; align-items: center; gap: 8px; font-size: 14px; cursor: pointer;">
          <input type="checkbox" id="hideEmailCompletedCheckbox" ${hideCompleted ? 'checked' : ''}
                 onchange="toggleHideEmailCompleted()" style="cursor: pointer;">
          <span>Hide Completed</span>
        </label>
      </div>

      <div>
        <table class="email-table">
          <thead>
            <tr>
              <th>Order #</th>
              <th>Customer</th>
              <th>Email Addresses</th>
              <th>Status</th>
              <th>Date</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${displayedOrders.length === 0
              ? '<tr><td colspan="6" style="text-align: center; padding: 20px; color: var(--text-muted);">No email orders found</td></tr>'
              : displayedOrders.map(t => {
                const emails = t.email_addresses ? JSON.parse(t.email_addresses) : [];
                const emailList = emails.map(e => e.value || e).join(', ');
                return `
                  <tr>
                    <td><span class="customer-number">#${t.customer_number}</span></td>
                    <td>${escapeHtml(t.customer_name)}</td>
                    <td style="font-size: 12px; max-width: 200px; overflow: hidden; text-overflow: ellipsis;">${emailList || 'N/A'}</td>
                    <td>
                      <span class="status-badge ${t.status_emails_sent ? 'completed' : 'pending'}">
                        ${t.status_emails_sent ? 'Sent' : 'Pending'}
                      </span>
                    </td>
                    <td style="font-size: 12px;">${formatTimestamp(t.created_at)}</td>
                    <td>
                      ${!t.status_emails_sent
                        ? `<button class="btn btn-sm btn-success" onclick="markEmailSent('${t.customer_number}')">Mark Sent</button>`
                        : `<button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails('${t.customer_number}')">View</button>`
                      }
                    </td>
                  </tr>
                `;
              }).join('')
            }
          </tbody>
        </table>
      </div>
      
      ${pending.length > 0 ? `
        <div style="margin-top: 20px; padding: 16px; background: var(--bg-hover); border-radius: 8px; border-left: 4px solid var(--color-warning);">
          <p style="font-size: 14px; color: var(--text-secondary); margin-bottom: 8px;">
            ⚠️ <strong>${pending.length}</strong> email order(s) pending
          </p>
          <p style="font-size: 13px; color: var(--text-muted);">
            These orders are waiting for email delivery. Once emails are sent, mark them as sent to update their status.
          </p>
        </div>
      ` : ''}
    </div>
  `;
}

async function markEmailSent(customerNumber) {
  try {
    await updateTransactionStatus(customerNumber, 'status_emails_sent', true);
    renderEmailDashboard(); // Refresh the email dashboard
    showToast('Email marked as sent', 'success');
  } catch (error) {
    showToast('Failed to update email status', 'error');
  }
}

function toggleHideEmailCompleted() {
  window.hideEmailCompleted = !window.hideEmailCompleted;
  renderEmailDashboard();
}

// ============================================
// UI HELPERS
// ============================================

function openModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.add('active');
  document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.remove('active');
  document.body.style.overflow = '';
}

function showToast(message, type = 'info') {
  const container = document.getElementById('toastContainer');
  
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  toast.innerHTML = `<p class="toast-message">${escapeHtml(message)}</p>`;
  
  container.appendChild(toast);
  
  // Auto remove after 4 seconds
  setTimeout(() => {
    toast.style.animation = 'slideOutRight 200ms ease';
    setTimeout(() => {
      if (toast.parentNode) {
        container.removeChild(toast);
      }
    }, 200);
  }, 4000);
}

function updateConnectionStatus(status) {
  const dot = document.getElementById('statusDot');
  const text = document.getElementById('statusText');
  
  dot.className = 'status-dot';
  
  switch (status) {
    case 'online':
      dot.classList.add('online');
      text.textContent = 'Connected';
      break;
    case 'offline':
      dot.classList.add('offline');
      text.textContent = 'Disconnected';
      break;
    case 'loading':
      text.textContent = 'Loading...';
      break;
  }
}

// ============================================
// FORMATTING UTILITIES
// ============================================

function formatCurrency(amount) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

function formatTimestamp(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = new Date(timestamp);
  const now = new Date();
  const diffMs = now - date;
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);
  
  if (diffMins < 1) return 'Just now';
  if (diffMins < 60) return `${diffMins}m ago`;
  if (diffHours < 24) return `${diffHours}h ago`;
  if (diffDays < 7) return `${diffDays}d ago`;
  
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}

function formatFullTimestamp(timestamp) {
  if (!timestamp) return 'N/A';

  const date = new Date(timestamp);
  return date.toLocaleString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function formatDeliveryMethod(method) {
  const methods = {
    'print': 'Print Only',
    'email': 'Email Only',
    'both': 'Print & Email'
  };
  return methods[method] || method;
}

function formatPaymentMethod(method) {
  if (!method) return 'N/A';

  const methods = {
    'cash': 'Cash',
    'card': 'Credit Card',
    'credit': 'Credit Card',
    'credit card': 'Credit Card',
    'venmo': 'Venmo',
    'free': 'Free/Comp'
  };

  const normalized = method.toLowerCase().trim();
  return methods[normalized] || method.charAt(0).toUpperCase() + method.slice(1).toLowerCase();
}

function getTransactionStatus(transaction) {
  // Order is complete
  if (transaction.status_picked_up) {
    return { label: 'Completed', class: 'completed' };
  }

  // Check specific pending items in order of importance
  if (!transaction.status_photo_taken) {
    return { label: 'Photo Pending', class: 'pending' };
  }

  if (!transaction.status_paid) {
    return { label: 'Payment Pending', class: 'pending' };
  }

  // Check delivery-specific requirements
  const needsEmail = transaction.delivery_method === 'email' || transaction.delivery_method === 'both';
  const needsPrint = transaction.delivery_method === 'print' || transaction.delivery_method === 'both';

  if (needsEmail && !transaction.status_emails_sent) {
    return { label: 'Email Pending', class: 'partial' };
  }

  if (needsPrint && !transaction.status_prints_ready) {
    return { label: 'Prints Pending', class: 'partial' };
  }

  // Everything is ready, just waiting for pickup
  if (needsPrint && transaction.status_prints_ready) {
    return { label: 'Pickup Pending', class: 'partial' };
  }

  // Fallback for edge cases
  return { label: 'In Progress', class: 'partial' };
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// ============================================
// EXPOSE FUNCTIONS TO GLOBAL SCOPE
// (for onclick handlers in HTML)
// ============================================

window.viewTransactionDetails = viewTransactionDetails;
window.updateTransactionStatus = updateTransactionStatus;
window.saveOperatorNotes = saveOperatorNotes;
window.viewPhoto = viewPhoto;
window.markPrintReady = markPrintReady;
window.markEmailSent = markEmailSent;
