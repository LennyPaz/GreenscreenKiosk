/**
 * Operator Dashboard JavaScript
 * Handles all dashboard functionality including fetching, displaying, and managing transactions
 */

// ============================================
// CONFIGURATION
// ============================================

const API_BASE_URL = 'http://localhost:5000/api';
const REFRESH_INTERVAL = 30000; // 30 seconds

// ============================================
// STATE MANAGEMENT
// ============================================

let state = {
  transactions: [],
  filteredTransactions: [],
  statistics: {},
  currentFilter: 'all',
  searchTerm: '',
  isLoading: false
};

// ============================================
// INITIALIZATION
// ============================================

document.addEventListener('DOMContentLoaded', () => {
  initializeApp();
});

async function initializeApp() {
  console.log('Initializing dashboard...');
  
  // Set up event listeners
  setupEventListeners();
  
  // Initial data load
  await loadDashboardData();
  
  // Set up auto-refresh
  setInterval(loadDashboardData, REFRESH_INTERVAL);
  
  console.log('Dashboard initialized successfully');
}

// ============================================
// EVENT LISTENERS
// ============================================

function setupEventListeners() {
  // Refresh button
  document.getElementById('refreshBtn').addEventListener('click', async () => {
    await loadDashboardData();
    showToast('Data refreshed successfully', 'success');
  });
  
  // Search
  document.getElementById('searchBtn').addEventListener('click', handleSearch);
  document.getElementById('searchInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  });
  
  // Clear search
  document.getElementById('clearSearchBtn').addEventListener('click', () => {
    document.getElementById('searchInput').value = '';
    state.searchTerm = '';
    filterAndRenderTransactions();
  });
  
  // Status filter
  document.getElementById('statusFilter').addEventListener('change', (e) => {
    state.currentFilter = e.target.value;
    filterAndRenderTransactions();
  });
  
  // Modal close
  document.getElementById('modalClose').addEventListener('click', closeModal);
  document.getElementById('modalCloseBtn').addEventListener('click', closeModal);
  document.getElementById('modalOverlay').addEventListener('click', closeModal);
}

// ============================================
// DATA FETCHING
// ============================================

async function loadDashboardData() {
  if (state.isLoading) return;
  
  state.isLoading = true;
  updateConnectionStatus('loading');
  
  try {
    // Fetch statistics and transactions in parallel
    const [statsResponse, transactionsResponse] = await Promise.all([
      fetch(`${API_BASE_URL}/statistics`),
      fetch(`${API_BASE_URL}/transactions`)
    ]);
    
    if (!statsResponse.ok || !transactionsResponse.ok) {
      throw new Error('Failed to fetch data');
    }
    
    const statsData = await statsResponse.json();
    const transactionsData = await transactionsResponse.json();
    
    // Update state
    state.statistics = statsData.statistics;
    state.transactions = transactionsData.transactions;
    
    // Update UI
    renderStatistics();
    filterAndRenderTransactions();
    
    updateConnectionStatus('online');
  } catch (error) {
    console.error('Error loading dashboard data:', error);
    updateConnectionStatus('offline');
    showToast('Failed to load data. Retrying...', 'error');
  } finally {
    state.isLoading = false;
  }
}

// ============================================
// RENDERING FUNCTIONS
// ============================================

function renderStatistics() {
  const { totalOrders, totalRevenue, pendingOrders, todayOrders } = state.statistics;
  
  document.getElementById('totalOrders').textContent = totalOrders || 0;
  document.getElementById('totalRevenue').textContent = formatCurrency(totalRevenue || 0);
  document.getElementById('pendingOrders').textContent = pendingOrders || 0;
  document.getElementById('todayOrders').textContent = todayOrders || 0;
}

function filterAndRenderTransactions() {
  // Apply search filter
  let filtered = state.transactions;
  
  if (state.searchTerm) {
    filtered = filtered.filter(t => {
      const searchLower = state.searchTerm.toLowerCase();
      return (
        t.customer_number.toString().includes(searchLower) ||
        t.customer_name.toLowerCase().includes(searchLower) ||
        t.background_name.toLowerCase().includes(searchLower)
      );
    });
  }
  
  // Apply status filter
  if (state.currentFilter !== 'all') {
    filtered = filtered.filter(t => {
      switch (state.currentFilter) {
        case 'pending':
          return t.status_picked_up === 0;
        case 'completed':
          return t.status_picked_up === 1;
        case 'unpaid':
          return t.status_paid === 0;
        default:
          return true;
      }
    });
  }
  
  state.filteredTransactions = filtered;
  renderTransactions();
}

function renderTransactions() {
  const tbody = document.getElementById('transactionsBody');
  const countElement = document.getElementById('transactionCount');
  
  // Update count
  countElement.textContent = `Showing ${state.filteredTransactions.length} of ${state.transactions.length} orders`;
  
  // Clear existing rows
  tbody.innerHTML = '';
  
  // Handle empty state
  if (state.filteredTransactions.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="10" class="empty-cell">
          <p>No transactions found</p>
          ${state.searchTerm || state.currentFilter !== 'all' ? '<p style="margin-top: 8px; font-size: 14px;">Try adjusting your filters</p>' : ''}
        </td>
      </tr>
    `;
    return;
  }
  
  // Render transactions
  state.filteredTransactions.forEach(transaction => {
    const row = createTransactionRow(transaction);
    tbody.appendChild(row);
  });
}

function createTransactionRow(t) {
  const row = document.createElement('tr');
  
  // Determine status
  const status = getTransactionStatus(t);
  
  row.innerHTML = `
    <td>
      <span class="customer-number">#${t.customer_number}</span>
    </td>
    <td>${escapeHtml(t.customer_name)}</td>
    <td>${t.party_size}</td>
    <td>${escapeHtml(t.background_name)}</td>
    <td>${formatDeliveryMethod(t.delivery_method)}</td>
    <td>${formatPaymentMethod(t.payment_method)}</td>
    <td><span class="price">${formatCurrency(t.total_price)}</span></td>
    <td>
      <span class="status-badge ${status.class}">${status.label}</span>
    </td>
    <td>
      <div class="timestamp">${formatTimestamp(t.created_at)}</div>
    </td>
    <td>
      <button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails(${t.customer_number})">
        View
      </button>
    </td>
  `;
  
  return row;
}

// ============================================
// TRANSACTION DETAILS MODAL
// ============================================

async function viewTransactionDetails(customerNumber) {
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}`);
    
    if (!response.ok) {
      throw new Error('Transaction not found');
    }
    
    const data = await response.json();
    const transaction = data.transaction;
    
    renderTransactionModal(transaction);
    openModal();
  } catch (error) {
    console.error('Error loading transaction details:', error);
    showToast('Failed to load transaction details', 'error');
  }
}

function renderTransactionModal(t) {
  const modalBody = document.getElementById('modalBody');
  
  const emailAddresses = t.emailAddresses || (t.email_addresses ? JSON.parse(t.email_addresses) : []);
  const emailList = emailAddresses.map(e => e.value || e).join(', ') || 'None';
  
  modalBody.innerHTML = `
    <div style="display: grid; gap: 24px;">
      <!-- Customer Info -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Customer Information
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Order Number:</span>
            <span style="font-weight: 600; color: var(--color-primary);">#${t.customer_number}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Customer Name:</span>
            <span style="font-weight: 500;">${escapeHtml(t.customer_name)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Party Size:</span>
            <span>${t.party_size} ${t.party_size === 1 ? 'person' : 'people'}</span>
          </div>
          ${t.customer_photo_path ? `
            <div style="margin-top: 8px;">
              <span style="color: var(--text-secondary); display: block; margin-bottom: 8px;">Customer Photo:</span>
              <img src="${t.customer_photo_path}" alt="Customer photo" style="max-width: 200px; border-radius: 8px; border: 1px solid var(--color-gray-200);">
            </div>
          ` : ''}
        </div>
      </div>
      
      <!-- Order Details -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Order Details
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Background:</span>
            <span style="font-weight: 500;">${escapeHtml(t.background_name)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Delivery Method:</span>
            <span>${formatDeliveryMethod(t.delivery_method)}</span>
          </div>
          ${t.print_quantity > 0 ? `
            <div style="display: flex; justify-content: space-between;">
              <span style="color: var(--text-secondary);">Print Quantity:</span>
              <span>${t.print_quantity}</span>
            </div>
          ` : ''}
          ${emailAddresses.length > 0 ? `
            <div style="display: flex; justify-content: space-between;">
              <span style="color: var(--text-secondary);">Email Addresses:</span>
              <span style="text-align: right;">${emailList}</span>
            </div>
          ` : ''}
        </div>
      </div>
      
      <!-- Payment Info -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Payment Information
        </h3>
        <div style="display: grid; gap: 12px;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Payment Method:</span>
            <span>${formatPaymentMethod(t.payment_method)}</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: var(--text-secondary);">Total Amount:</span>
            <span style="font-size: 20px; font-weight: 700; color: var(--color-success);">${formatCurrency(t.total_price)}</span>
          </div>
        </div>
      </div>
      
      <!-- Status Checklist -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Order Status
        </h3>
        <div style="display: grid; gap: 12px;">
          ${createStatusCheckbox(t, 'status_photo_taken', 'Photo Taken')}
          ${createStatusCheckbox(t, 'status_paid', 'Payment Received')}
          ${createStatusCheckbox(t, 'status_emails_sent', 'Emails Sent')}
          ${createStatusCheckbox(t, 'status_prints_ready', 'Prints Ready')}
          ${createStatusCheckbox(t, 'status_picked_up', 'Order Picked Up')}
        </div>
      </div>
      
      <!-- Operator Notes -->
      <div>
        <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; color: var(--text-primary);">
          Operator Notes
        </h3>
        <textarea 
          id="operatorNotes" 
          rows="4" 
          style="width: 100%; padding: 12px; font-family: var(--font-family); font-size: 14px; border: 1px solid var(--color-gray-300); border-radius: 8px; resize: vertical;"
          placeholder="Add notes about this order..."
        >${t.operator_notes || ''}</textarea>
        <button class="btn btn-primary mt-4" onclick="saveOperatorNotes(${t.customer_number})">
          Save Notes
        </button>
      </div>
      
      <!-- Metadata -->
      <div style="padding-top: 16px; border-top: 1px solid var(--color-gray-200);">
        <div style="display: grid; gap: 8px; font-size: 13px; color: var(--text-muted);">
          <div>Created: ${formatFullTimestamp(t.created_at)}</div>
          <div>Last Updated: ${formatFullTimestamp(t.updated_at)}</div>
          ${t.event_name ? `<div>Event: ${escapeHtml(t.event_name)}</div>` : ''}
        </div>
      </div>
    </div>
  `;
}

function createStatusCheckbox(transaction, field, label) {
  const isChecked = transaction[field] === 1;
  const checkboxId = `checkbox_${field}_${transaction.customer_number}`;
  
  return `
    <label style="display: flex; align-items: center; gap: 12px; padding: 12px; background: var(--bg-hover); border-radius: 8px; cursor: pointer;">
      <input 
        type="checkbox" 
        id="${checkboxId}"
        ${isChecked ? 'checked' : ''}
        onchange="updateTransactionStatus(${transaction.customer_number}, '${field}', this.checked)"
        style="width: 18px; height: 18px; cursor: pointer;"
      >
      <span style="font-weight: 500;">${label}</span>
    </label>
  `;
}

// ============================================
// API ACTIONS
// ============================================

async function updateTransactionStatus(customerNumber, field, value) {
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}/status`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ field, value })
    });
    
    if (!response.ok) {
      throw new Error('Failed to update status');
    }
    
    // Update local state
    const transaction = state.transactions.find(t => t.customer_number === customerNumber);
    if (transaction) {
      transaction[field] = value ? 1 : 0;
      filterAndRenderTransactions();
    }
    
    showToast('Status updated successfully', 'success');
  } catch (error) {
    console.error('Error updating status:', error);
    showToast('Failed to update status', 'error');
    
    // Revert checkbox
    const checkbox = document.getElementById(`checkbox_${field}_${customerNumber}`);
    if (checkbox) {
      checkbox.checked = !value;
    }
  }
}

async function saveOperatorNotes(customerNumber) {
  const notes = document.getElementById('operatorNotes').value;
  
  try {
    const response = await fetch(`${API_BASE_URL}/transactions/${customerNumber}/notes`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ notes })
    });
    
    if (!response.ok) {
      throw new Error('Failed to save notes');
    }
    
    // Update local state
    const transaction = state.transactions.find(t => t.customer_number === customerNumber);
    if (transaction) {
      transaction.operator_notes = notes;
    }
    
    showToast('Notes saved successfully', 'success');
  } catch (error) {
    console.error('Error saving notes:', error);
    showToast('Failed to save notes', 'error');
  }
}

async function handleSearch() {
  const searchInput = document.getElementById('searchInput');
  const query = searchInput.value.trim();
  
  if (!query) {
    showToast('Please enter a search term', 'warning');
    return;
  }
  
  state.searchTerm = query;
  filterAndRenderTransactions();
}

// ============================================
// UI HELPERS
// ============================================

function openModal() {
  const modal = document.getElementById('detailModal');
  modal.classList.add('active');
  document.body.style.overflow = 'hidden';
}

function closeModal() {
  const modal = document.getElementById('detailModal');
  modal.classList.remove('active');
  document.body.style.overflow = '';
}

function showToast(message, type = 'info') {
  const container = document.getElementById('toastContainer');
  
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  toast.innerHTML = `<p class="toast-message">${escapeHtml(message)}</p>`;
  
  container.appendChild(toast);
  
  // Auto remove after 4 seconds
  setTimeout(() => {
    toast.style.animation = 'slideOutRight 200ms ease';
    setTimeout(() => {
      container.removeChild(toast);
    }, 200);
  }, 4000);
}

function updateConnectionStatus(status) {
  const dot = document.getElementById('statusDot');
  const text = document.getElementById('statusText');
  
  dot.className = 'status-dot';
  
  switch (status) {
    case 'online':
      dot.classList.add('online');
      text.textContent = 'Connected';
      break;
    case 'offline':
      dot.classList.add('offline');
      text.textContent = 'Disconnected';
      break;
    case 'loading':
      text.textContent = 'Loading...';
      break;
  }
}

// ============================================
// FORMATTING UTILITIES
// ============================================

function formatCurrency(amount) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

function formatTimestamp(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = new Date(timestamp);
  const now = new Date();
  const diffMs = now - date;
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);
  
  if (diffMins < 1) return 'Just now';
  if (diffMins < 60) return `${diffMins}m ago`;
  if (diffHours < 24) return `${diffHours}h ago`;
  if (diffDays < 7) return `${diffDays}d ago`;
  
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}

function formatFullTimestamp(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = new Date(timestamp);
  return date.toLocaleString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function formatDeliveryMethod(method) {
  const methods = {
    'print': 'Print Only',
    'email': 'Email Only',
    'both': 'Print & Email'
  };
  return methods[method] || method;
}

function formatPaymentMethod(method) {
  const methods = {
    'cash': 'Cash',
    'card': 'Credit Card',
    'venmo': 'Venmo',
    'free': 'Free/Comp'
  };
  return methods[method] || method;
}

function getTransactionStatus(transaction) {
  if (transaction.status_picked_up) {
    return { label: 'Completed', class: 'completed' };
  }
  
  const statuses = [
    transaction.status_photo_taken,
    transaction.status_paid,
    transaction.status_emails_sent,
    transaction.status_prints_ready
  ];
  
  const completedCount = statuses.filter(s => s === 1).length;
  
  if (completedCount === 0) {
    return { label: 'Pending', class: 'pending' };
  }
  
  return { label: 'In Progress', class: 'partial' };
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// ============================================
// EXPOSE FUNCTIONS TO GLOBAL SCOPE
// (for onclick handlers in HTML)
// ============================================

window.viewTransactionDetails = viewTransactionDetails;
window.updateTransactionStatus = updateTransactionStatus;
window.saveOperatorNotes = saveOperatorNotes;
