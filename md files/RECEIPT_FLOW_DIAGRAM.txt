╔═══════════════════════════════════════════════════════════════════════════╗
║                    KIOSK RECEIPT INTEGRATION FLOW                         ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│                          USER JOURNEY                                   │
└─────────────────────────────────────────────────────────────────────────┘

    [Attract Screen]
           ↓
    [Welcome Screen]
           ↓
    [Background Selection] ──→ state.selectedBackground, backgroundName
           ↓
    [Party Size] ──────────→ state.partySize
           ↓
    [Delivery Method] ─────→ state.deliveryMethod (print/email/both)
           ↓
    [Print Quantity] ──────→ state.printQuantity (if applicable)
           ↓
    [Email Entry] ─────────→ state.emailAddresses[] (if applicable)
           ↓
    [Name Entry] ──────────→ state.customerName
           ↓
    [Review Order] ────────→ Confirm all details
           ↓
    [Payment Method] ──────→ state.paymentMethod
           ↓
    [Customer Photo] ──────→ state.customerPhoto (base64)
           ↓
    ┌────────────────────────────────────────────────────┐
    │         [PROCESSING SCREEN]                        │
    │  ✓ Generate customer number                        │
    │  ✓ Call submitOrderToAPI()                         │
    │     └──→ POST /api/transactions                    │
    │          ├─ Send all state data                    │
    │          ├─ Save customer photo to disk            │
    │          ├─ Create database record                 │
    │          └─ Return success/error                   │
    │                                                     │
    │  [SUCCESS]           [ERROR]                       │
    │     ↓                   ↓                          │
    │  Navigate to        Show error                    │
    │  Receipt            + Retry button                 │
    └────────────────────────────────────────────────────┘
           ↓
    ┌────────────────────────────────────────────────────┐
    │         [RECEIPT SCREEN]                           │
    │  ┌──────────────────┬─────────────────────┐       │
    │  │ CUSTOMER RECEIPT │  OPERATOR RECEIPT   │       │
    │  ├──────────────────┼─────────────────────┤       │
    │  │ • Order #        │ • Order # (large)   │       │
    │  │ • Customer name  │ • Customer photo    │       │
    │  │ • Order details  │ • Quick ref data    │       │
    │  │ • Total price    │ • Email list        │       │
    │  │ • Pickup info    │ • Status boxes      │       │
    │  │ • Contact info   │ • Notes section     │       │
    │  └──────────────────┴─────────────────────┘       │
    │                                                     │
    │  [PRINT BUTTON]                                    │
    │  [Auto-return in 30s]                              │
    └────────────────────────────────────────────────────┘
           ↓
    [Back to Attract Screen]


┌─────────────────────────────────────────────────────────────────────────┐
│                        BACKEND DATA FLOW                                │
└─────────────────────────────────────────────────────────────────────────┘

  submitOrderToAPI()
         ↓
  ┌──────────────────────┐
  │  Format Order Data:  │
  │  • customerNumber    │
  │  • customerName      │
  │  • partySize         │
  │  • customerPhoto     │──→ Base64 string
  │  • backgroundId      │
  │  • deliveryMethod    │
  │  • printQuantity     │
  │  • emailAddresses[]  │
  │  • paymentMethod     │
  │  • totalPrice        │
  └──────────────────────┘
         ↓
  POST /api/transactions
         ↓
  ┌──────────────────────────────┐
  │   server.js Handler:         │
  │  1. Validate required fields │
  │  2. Save customer photo      │──→ /data/images/customer_photos/[number].jpg
  │  3. Prepare transaction data │
  │  4. Call db.createTransaction│
  └──────────────────────────────┘
         ↓
  ┌──────────────────────────────┐
  │   database.js:               │
  │  • Insert into transactions  │
  │  • Set EST timestamp         │
  │  • Return transaction ID     │
  └──────────────────────────────┘
         ↓
  ┌──────────────────────────────┐
  │   Response:                  │
  │  {                           │
  │    success: true,            │
  │    transaction: {            │
  │      id: 123,                │
  │      customerNumber: 601     │
  │    }                         │
  │  }                           │
  └──────────────────────────────┘
         ↓
  [Display Receipt]


┌─────────────────────────────────────────────────────────────────────────┐
│                     OPERATOR DASHBOARD SYNC                             │
└─────────────────────────────────────────────────────────────────────────┘

                Transaction Created
                        ↓
           Stored in transactions.db
                        ↓
        ┌───────────────────────────────┐
        │   Operator Dashboard          │
        │  GET /api/transactions        │
        │        ↓                      │
        │  Shows all orders including:  │
        │  • Customer #601              │
        │  • Name, party size           │
        │  • Background selected        │
        │  • Print/email details        │
        │  • Payment method             │
        │  • Customer photo             │
        │  • Status checkboxes          │
        └───────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────┐
│                          ERROR HANDLING                                 │
└─────────────────────────────────────────────────────────────────────────┘

    submitOrderToAPI() catches errors:
           ↓
    ┌────────────────────────────┐
    │ Network error?             │──→ Show error message
    │ Server down?               │──→ Suggest contacting staff
    │ Validation failed?         │──→ Display specific error
    │ Database error?            │──→ Show retry button
    └────────────────────────────┘
           ↓
    [User can start new order or get help]


┌─────────────────────────────────────────────────────────────────────────┐
│                     ANALYTICS INTEGRATION                               │
└─────────────────────────────────────────────────────────────────────────┘

    Every transaction creates a database record
                   ↓
    ┌──────────────────────────────────────┐
    │  GET /api/analytics/orders-by-hour   │
    │  • Query by date                     │
    │  • Group by hour (0-23)              │
    │  • Return array of counts            │
    │    [0,0,0,5,12,8,15,...]            │
    └──────────────────────────────────────┘
                   ↓
        [Operator Dashboard Charts]


╔═══════════════════════════════════════════════════════════════════════════╗
║                           KEY COMPONENTS                                  ║
╚═══════════════════════════════════════════════════════════════════════════╝

📁 src/kiosk.js
   └─ submitOrderToAPI() ──────→ NEW: Handles order submission
   └─ createProcessingScreen() ─→ UPDATED: Triggers submission
   └─ createReceiptScreen() ────→ EXISTS: Shows dual receipt

📁 server/server.js
   └─ POST /api/transactions ───→ EXISTS: Creates transaction
   └─ saveCustomerPhoto() ──────→ EXISTS: Saves base64 to disk

📁 server/database.js  
   └─ createTransaction() ──────→ EXISTS: Inserts into DB
   └─ getOrdersByHour() ────────→ EXISTS: Analytics query

📁 server/utils/receiptTemplate.js
   └─ generateReceipt() ────────→ EXISTS: Shared template

📁 server/routes/analytics.js
   └─ GET /orders-by-hour ──────→ NEW: Modular route handler


╔═══════════════════════════════════════════════════════════════════════════╗
║                          TESTING CHECKLIST                                ║
╚═══════════════════════════════════════════════════════════════════════════╝

□ Server starts without errors
□ Kiosk loads attract screen
□ Can complete full order flow
□ Processing screen shows progress
□ Order submits successfully
□ Receipt displays correctly
□ Customer number matches everywhere
□ Order appears in operator dashboard
□ Print button works
□ Auto-return triggers after 30s
□ Analytics endpoint returns data
□ Error handling works when server down
