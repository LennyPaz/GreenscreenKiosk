// This file contains the continuation and should be appended to dashboard-new.js
// Copy the entire content of dashboard-new.js above this comment, then add the content below

// ============================================
// ANALYTICS MODAL
// ============================================

function openAnalyticsModal() {
  openModal('analyticsModal');
  setTimeout(renderAnalytics, 100); // Give modal time to render
}

function renderAnalytics() {
  createRevenueChart();
  createBackgroundsChart();
  createOrdersTimeChart();
  createDeliveryChart();
}

function createRevenueChart() {
  const canvas = document.getElementById('revenueChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Group by date and sum revenue
  const revenueByDate = {};
  state.transactions.forEach(t => {
    const date = t.created_at.split('T')[0];
    revenueByDate[date] = (revenueByDate[date] || 0) + parseFloat(t.total_price);
  });
  
  const sortedDates = Object.keys(revenueByDate).sort();
  const revenues = sortedDates.map(date => revenueByDate[date]);
  
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: sortedDates.map(d => new Date(d).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })),
      datasets: [{
        label: 'Revenue ($)',
        data: revenues,
        borderColor: 'rgb(37, 99, 235)',
        backgroundColor: 'rgba(37, 99, 235, 0.1)',
        tension: 0.3,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              return '$' + value.toFixed(0);
            }
          }
        }
      }
    }
  });
}

function createBackgroundsChart() {
  const canvas = document.getElementById('backgroundsChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Count backgrounds
  const backgroundCounts = {};
  state.transactions.forEach(t => {
    const bg = t.background_name;
    backgroundCounts[bg] = (backgroundCounts[bg] || 0) + 1;
  });
  
  // Sort by count and take top 10
  const sortedBackgrounds = Object.entries(backgroundCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);
  
  const labels = sortedBackgrounds.map(([bg]) => bg);
  const data = sortedBackgrounds.map(([, count]) => count);
  
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Orders',
        data: data,
        backgroundColor: 'rgba(16, 185, 129, 0.8)',
        borderColor: 'rgb(16, 185, 129)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            stepSize: 1
          }
        }
      }
    }
  });
}

function createOrdersTimeChart() {
  const canvas = document.getElementById('ordersTimeChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Count orders by hour
  const hourCounts = new Array(24).fill(0);
  state.transactions.forEach(t => {
    const hour = new Date(t.created_at).getHours();
    hourCounts[hour]++;
  });
  
  const labels = hourCounts.map((_, i) => {
    const hour = i % 12 || 12;
    const ampm = i < 12 ? 'AM' : 'PM';
    return `${hour}${ampm}`;
  });
  
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Orders',
        data: hourCounts,
        backgroundColor: 'rgba(245, 158, 11, 0.8)',
        borderColor: 'rgb(245, 158, 11)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            stepSize: 1
          }
        }
      }
    }
  });
}

function createDeliveryChart() {
  const canvas = document.getElementById('deliveryChart');
  if (!canvas) return;
  
  const ctx = canvas.getContext('2d');
  
  // Count delivery methods
  const deliveryCounts = { print: 0, email: 0, both: 0 };
  state.transactions.forEach(t => {
    deliveryCounts[t.delivery_method]++;
  });
  
  new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Print Only', 'Email Only', 'Both'],
      datasets: [{
        data: [deliveryCounts.print, deliveryCounts.email, deliveryCounts.both],
        backgroundColor: [
          'rgba(59, 130, 246, 0.8)',
          'rgba(168, 85, 247, 0.8)',
          'rgba(236, 72, 153, 0.8)'
        ],
        borderColor: [
          'rgb(59, 130, 246)',
          'rgb(168, 85, 247)',
          'rgb(236, 72, 153)'
        ],
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          position: 'bottom'
        }
      }
    }
  });
}

// ============================================
// PRINT QUEUE MODAL
// ============================================

function openPrintQueueModal() {
  renderPrintQueue();
  openModal('printQueueModal');
}

function renderPrintQueue() {
  const body = document.getElementById('printQueueBody');
  
  const printOrders = state.transactions.filter(t => 
    t.delivery_method === 'print' || t.delivery_method === 'both'
  );
  
  const ready = printOrders.filter(t => t.status_prints_ready === 1 && t.status_picked_up === 0);
  const pending = printOrders.filter(t => t.status_prints_ready === 0);
  const pickedUp = printOrders.filter(t => t.status_picked_up === 1);
  
  body.innerHTML = `
    <div class="print-queue">
      <div class="queue-stats">
        <div class="queue-stat ready">
          <div class="stat-icon">‚úÖ</div>
          <div>
            <div class="stat-label">Ready for Pickup</div>
            <div class="stat-value">${ready.length}</div>
          </div>
        </div>
        <div class="queue-stat pending">
          <div class="stat-icon">‚è≥</div>
          <div>
            <div class="stat-label">Pending Print</div>
            <div class="stat-value">${pending.length}</div>
          </div>
        </div>
        <div class="queue-stat completed">
          <div class="stat-icon">üì¶</div>
          <div>
            <div class="stat-label">Picked Up</div>
            <div class="stat-value">${pickedUp.length}</div>
          </div>
        </div>
      </div>
      
      <div style="margin-top: 24px;">
        <h3 style="font-size: 16px; font-weight: 600; margin-bottom: 16px;">Print Queue Details</h3>
        <table class="print-queue-table">
          <thead>
            <tr>
              <th>Order #</th>
              <th>Customer</th>
              <th>Copies</th>
              <th>Background</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${ready.length === 0 && pending.length === 0 
              ? '<tr><td colspan="6" style="text-align: center; padding: 20px; color: var(--text-muted);">No print orders in queue</td></tr>'
              : [...pending, ...ready].map(t => `
                <tr>
                  <td><span class="customer-number">#${t.customer_number}</span></td>
                  <td>${escapeHtml(t.customer_name)}</td>
                  <td>${t.print_quantity || 1}</td>
                  <td>${escapeHtml(t.background_name)}</td>
                  <td>
                    <span class="status-badge ${t.status_prints_ready ? 'completed' : 'pending'}">
                      ${t.status_prints_ready ? 'Ready' : 'Pending'}
                    </span>
                  </td>
                  <td>
                    ${!t.status_prints_ready 
                      ? `<button class="btn btn-sm btn-success" onclick="markPrintReady(${t.customer_number})">Mark Ready</button>`
                      : `<button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails(${t.customer_number})">View</button>`
                    }
                  </td>
                </tr>
              `).join('')
            }
          </tbody>
        </table>
      </div>
    </div>
  `;
}

async function markPrintReady(customerNumber) {
  try {
    await updateTransactionStatus(customerNumber, 'status_prints_ready', true);
    renderPrintQueue(); // Refresh the print queue
    showToast('Print marked as ready', 'success');
  } catch (error) {
    showToast('Failed to update print status', 'error');
  }
}

// ============================================
// EMAIL DASHBOARD MODAL
// ============================================

function openEmailDashboardModal() {
  renderEmailDashboard();
  openModal('emailDashboardModal');
}

function renderEmailDashboard() {
  const body = document.getElementById('emailDashboardBody');
  
  const emailOrders = state.transactions.filter(t => 
    t.delivery_method === 'email' || t.delivery_method === 'both'
  );
  
  const sent = emailOrders.filter(t => t.status_emails_sent === 1);
  const pending = emailOrders.filter(t => t.status_emails_sent === 0);
  
  body.innerHTML = `
    <div class="email-dashboard">
      <div class="email-stats">
        <div class="email-stat">
          <div class="stat-icon">üìß</div>
          <div>
            <div class="stat-label">Total Email Orders</div>
            <div class="stat-value">${emailOrders.length}</div>
          </div>
        </div>
        <div class="email-stat success">
          <div class="stat-icon">‚úÖ</div>
          <div>
            <div class="stat-label">Emails Sent</div>
            <div class="stat-value">${sent.length}</div>
          </div>
        </div>
        <div class="email-stat warning">
          <div class="stat-icon">‚è≥</div>
          <div>
            <div class="stat-label">Pending</div>
            <div class="stat-value">${pending.length}</div>
          </div>
        </div>
      </div>
      
      <div style="margin-top: 24px;">
        <h3 style="font-size: 16px; font-weight: 600; margin-bottom: 16px;">Email Delivery Status</h3>
        <table class="email-table">
          <thead>
            <tr>
              <th>Order #</th>
              <th>Customer</th>
              <th>Email Addresses</th>
              <th>Status</th>
              <th>Date</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${emailOrders.length === 0 
              ? '<tr><td colspan="6" style="text-align: center; padding: 20px; color: var(--text-muted);">No email orders found</td></tr>'
              : emailOrders.map(t => {
                const emails = t.email_addresses ? JSON.parse(t.email_addresses) : [];
                const emailList = emails.map(e => e.value || e).join(', ');
                return `
                  <tr>
                    <td><span class="customer-number">#${t.customer_number}</span></td>
                    <td>${escapeHtml(t.customer_name)}</td>
                    <td style="font-size: 12px; max-width: 200px; overflow: hidden; text-overflow: ellipsis;">${emailList || 'N/A'}</td>
                    <td>
                      <span class="status-badge ${t.status_emails_sent ? 'completed' : 'pending'}">
                        ${t.status_emails_sent ? 'Sent' : 'Pending'}
                      </span>
                    </td>
                    <td style="font-size: 12px;">${formatTimestamp(t.created_at)}</td>
                    <td>
                      ${!t.status_emails_sent 
                        ? `<button class="btn btn-sm btn-success" onclick="markEmailSent(${t.customer_number})">Mark Sent</button>`
                        : `<button class="btn btn-sm btn-secondary" onclick="viewTransactionDetails(${t.customer_number})">View</button>`
                      }
                    </td>
                  </tr>
                `;
              }).join('')
            }
          </tbody>
        </table>
      </div>
      
      ${pending.length > 0 ? `
        <div style="margin-top: 20px; padding: 16px; background: var(--bg-hover); border-radius: 8px; border-left: 4px solid var(--color-warning);">
          <p style="font-size: 14px; color: var(--text-secondary); margin-bottom: 8px;">
            ‚ö†Ô∏è <strong>${pending.length}</strong> email order(s) pending
          </p>
          <p style="font-size: 13px; color: var(--text-muted);">
            These orders are waiting for email delivery. Once emails are sent, mark them as sent to update their status.
          </p>
        </div>
      ` : ''}
    </div>
  `;
}

async function markEmailSent(customerNumber) {
  try {
    await updateTransactionStatus(customerNumber, 'status_emails_sent', true);
    renderEmailDashboard(); // Refresh the email dashboard
    showToast('Email marked as sent', 'success');
  } catch (error) {
    showToast('Failed to update email status', 'error');
  }
}

// ============================================
// UI HELPERS
// ============================================

function openModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.add('active');
  document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  modal.classList.remove('active');
  document.body.style.overflow = '';
}

function showToast(message, type = 'info') {
  const container = document.getElementById('toastContainer');
  
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  toast.innerHTML = `<p class="toast-message">${escapeHtml(message)}</p>`;
  
  container.appendChild(toast);
  
  // Auto remove after 4 seconds
  setTimeout(() => {
    toast.style.animation = 'slideOutRight 200ms ease';
    setTimeout(() => {
      if (toast.parentNode) {
        container.removeChild(toast);
      }
    }, 200);
  }, 4000);
}

function updateConnectionStatus(status) {
  const dot = document.getElementById('statusDot');
  const text = document.getElementById('statusText');
  
  dot.className = 'status-dot';
  
  switch (status) {
    case 'online':
      dot.classList.add('online');
      text.textContent = 'Connected';
      break;
    case 'offline':
      dot.classList.add('offline');
      text.textContent = 'Disconnected';
      break;
    case 'loading':
      text.textContent = 'Loading...';
      break;
  }
}

// ============================================
// FORMATTING UTILITIES
// ============================================

function formatCurrency(amount) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}

function formatTimestamp(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = new Date(timestamp);
  const now = new Date();
  const diffMs = now - date;
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);
  
  if (diffMins < 1) return 'Just now';
  if (diffMins < 60) return `${diffMins}m ago`;
  if (diffHours < 24) return `${diffHours}h ago`;
  if (diffDays < 7) return `${diffDays}d ago`;
  
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}

function formatFullTimestamp(timestamp) {
  if (!timestamp) return 'N/A';
  
  const date = new Date(timestamp);
  return date.toLocaleString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function formatDeliveryMethod(method) {
  const methods = {
    'print': 'Print Only',
    'email': 'Email Only',
    'both': 'Print & Email'
  };
  return methods[method] || method;
}

function formatPaymentMethod(method) {
  const methods = {
    'cash': 'Cash',
    'card': 'Credit Card',
    'venmo': 'Venmo',
    'free': 'Free/Comp'
  };
  return methods[method] || method;
}

function getTransactionStatus(transaction) {
  if (transaction.status_picked_up) {
    return { label: 'Completed', class: 'completed' };
  }
  
  const statuses = [
    transaction.status_photo_taken,
    transaction.status_paid,
    transaction.status_emails_sent,
    transaction.status_prints_ready
  ];
  
  const completedCount = statuses.filter(s => s === 1).length;
  
  if (completedCount === 0) {
    return { label: 'Pending', class: 'pending' };
  }
  
  return { label: 'In Progress', class: 'partial' };
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// ============================================
// EXPOSE FUNCTIONS TO GLOBAL SCOPE
// (for onclick handlers in HTML)
// ============================================

window.viewTransactionDetails = viewTransactionDetails;
window.updateTransactionStatus = updateTransactionStatus;
window.saveOperatorNotes = saveOperatorNotes;
window.viewPhoto = viewPhoto;
window.markPrintReady = markPrintReady;
window.markEmailSent = markEmailSent;
